illegal_titles %<>%
mutate(bastille_imprint_full = gsub("Published in", "", bastille_imprint_full), # remove phrase 'published in'
bastille_imprint_full = gsub(", publisher not identified", "", bastille_imprint_full), # remove phrase 'publisher not identified'
bastille_imprint_full = gsub("No .+[.]", "", bastille_imprint_full),  # remove any notes like 'No publisher identified.'
bastille_imprint_full = gsub("[^[:alnum:]_].+", "", bastille_imprint_full), # remove everything after the first punctuation mark
bastille_imprint_full = gsub("[0-9]", "", bastille_imprint_full), # remove numbers
bastille_imprint_full = gsub("[[:punct:]]", "", bastille_imprint_full), # strip punctuation
bastille_imprint_full = gsub("contains|source|this|place|various|dates|deux|publication|music|printed|trans", "", bastille_imprint_full, ignore.case = T), # strip out some particular words that are specific to this column
bastille_imprint_full = str_squish(bastille_imprint_full), # remove leading and trailing whitespace
bastille_imprint_full = gsub("^.{1,3}$", "", bastille_imprint_full) # remove any entries only 2-3 characters long
)
# Have a look at results:
select(illegal_titles, bastille_imprint_full) %>%
filter(nchar(bastille_imprint_full) > 0) %>%
sample_n(15)
# Now try to extract place of publication from the illegal_notes field
illegal_titles %<>%
mutate(illegal_notes = str_match(illegal_notes, "Published in (.+)")[,2], # grab everything after phrase 'published in'
illegal_notes = word(illegal_notes, 1, sep = regex("[:, ]")), # just keep first word of new string, which is where the place name is
illegal_notes = gsub("[0-9]", "", illegal_notes), # delete dates from field
illegal_notes = gsub("^.{1,3}$", "", illegal_notes) # delete short rubbishy strings
)
# Have a look at the results
select(illegal_titles, illegal_notes) %>%
filter(nchar(illegal_notes) > 0) %>%
sample_n(15)
# Now that those two columns have been fixed up, we can coalesce them.
illegal_titles %<>%
mutate(stated_publication_places = coalesce(illegal_notes, bastille_imprint_full)) %>%
select(-illegal_notes, -bastille_imprint_full)
# Have a look at the results
sample_n(illegal_titles, 15)
# The next step is to clean the date field for the illegal books. Luckily this is really easy.
illegal_titles %<>%
mutate(stated_publication_years = gsub("No Date Available", "", illegal_date)) %>% # remove extraneous string and also change the column name
select(-illegal_date) # drop old column.
# Have a look at the results
illegal_titles %>%
filter(nchar(stated_publication_years) > 0) %>%
sample_n(15)
# Finish renaming the columns
illegal_titles %<>%
rename(super_book_code = illegal_super_book_code,
full_book_title = illegal_full_book_title,
author_code = illegal_author_code,
author_name = illegal_author_name)
# Now that the data has been cleaned, we just need to combine the tables.
# We can see which columns the tables have in common ...
intersect(colnames(illegal_titles), colnames(editions))
# ... and which they do not:
setdiff(colnames(illegal_titles), colnames(editions))
# Now we can simply perform a full join to concatenate the tables.
combined_data <- full_join(illegal_titles, editions)
# One final thing: remove 'n. pl.' from stated_publication_places:
combined_data %<>%
mutate(stated_publication_places = gsub("n[.]pl[.]", "", stated_publication_places))
# See the results
sample_n(combined_data, 15)
# Export so it can be passed to dedupe library in Python.
combined_data %>%
write_csv("combined_editions_illegal_books.csv")
# SECTION 3: COMBINE EDITIONS DATA WITH DARNTON'S DATA
# Simon has provided client codes for Darnton's booksellers.
codes = c("Charmet" = "cl0274", "Lepagnez" = "cl0288", "Rigaud" = "cl1266", "Fontanel" = "cl1224",
"Letourmy" = "cl1514", "Sens" = "cl2067", "Caldesaigues" = "cl1203", "Gaude" = "cl1472",
"Buchet" = "cl1468", "Mossy" = "cl1210", "Robert&Gauthier" = "cl0353", "Bergeret" = "cl0335",
"Lair" = "cl0328", "Couret de Villeneuve" = "cl1510", "Pavie" = "cl1834", "Chevrier" = "cl1763")
# Import Darnton's data
darnton <- read_xlsx("darnton_files/darnton_data.xlsx") %>%
rename(darnton_record_id = X__1,
stn_abbreviated_title = `Titre de l'ouvrage`,
edition = format,
number_of_volumes = volumes,
copies_ordered = `Nbre d'ouvrages commandés`,
date = `Dates des commandes`,
full_book_title = `Editions et Commentaires`,
client_name = Libraire) %>%
mutate(client_code = map_chr(client_name, function(x) codes[x])) # add client codes
# Since Darnton's data is about orders for books, it might be good to compare it to our transactions data too.
orders <- manuscripts %>%
dbSendQuery("SELECT * FROM orders") %>%
fetch(n = Inf) %>%
as_tibble()
editions <- manuscripts %>%
dbSendQuery(paste0("SELECT * FROM manuscript_books_authors ",
"LEFT JOIN manuscript_books_editions ",
"ON manuscript_books_authors.book_code = manuscript_books_editions.book_code ",
"LEFT JOIN manuscript_authors ",
"ON manuscript_books_authors.author_code = manuscript_authors.author_code")) %>%
fetch(n = Inf) %>%
.[,c(-5,-28)] %>% # delete duplicate columns generated by the queries.
as_tibble()
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
select(transaction_code, stn_abbreviated_title, edition, number_of_volumes, total_number_of_volumes, date, full_book_title, client_code) %>%
filter(client_code %in% codes)
rm(orders, editions)
# Now join the tables together for deduplication.
darnton_combined_data <- darnton %>%
mutate(transaction_code = NA,
transaction_code = as.character(transaction_code)) %>%
full_join(transactions, by = "transaction_code") %T>%
write_csv("darnton_files/darnton_combined.csv")
darnton_combined_data
darnton
transactions
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
#select(transaction_code, stn_abbreviated_title, edition, number_of_volumes, total_number_of_volumes, date, full_book_title, client_code) %>%
filter(client_code %in% codes)
transactions
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
#select(transaction_code, stn_abbreviated_title, edition, number_of_volumes, total_number_of_volumes, date, full_book_title, client_code) %>%
filter(client_code %in% codes)
# Since Darnton's data is about orders for books, it might be good to compare it to our transactions data too.
orders <- manuscripts %>%
dbSendQuery("SELECT * FROM orders") %>%
fetch(n = Inf) %>%
as_tibble()
editions <- manuscripts %>%
dbSendQuery(paste0("SELECT * FROM manuscript_books_authors ",
"LEFT JOIN manuscript_books_editions ",
"ON manuscript_books_authors.book_code = manuscript_books_editions.book_code ",
"LEFT JOIN manuscript_authors ",
"ON manuscript_books_authors.author_code = manuscript_authors.author_code")) %>%
fetch(n = Inf) %>%
.[,c(-5,-28)] %>% # delete duplicate columns generated by the queries.
as_tibble()
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
#select(transaction_code, stn_abbreviated_title, edition, number_of_volumes, total_number_of_volumes, date, full_book_title, client_code) %>%
filter(client_code %in% codes)
transactions
colnames(darnton)
colnames(transactions)
# Import Darnton's data
darnton <- read_xlsx("darnton_files/darnton_data.xlsx") %>%
rename(darnton_record_id = X__1,
stn_abbreviated_title = `Titre de l'ouvrage`,
edition = format,
number_of_volumes = volumes,
copies_ordered = `Nbre d'ouvrages commandés`,
date = `Dates des commandes`,
full_book_title = `Editions et Commentaires`,
client_name = Libraire,
author_name = Auteur) %>%
mutate(client_code = map_chr(client_name, function(x) codes[x])) # add client codes
colnames(transactions)
colnames(darnton)
# Import Darnton's data
darnton <- read_xlsx("darnton_files/darnton_data.xlsx") %>%
rename(darnton_record_id = X__1,
stn_abbreviated_title = `Titre de l'ouvrage`,
edition = format,
number_of_volumes = volumes,
copies_ordered = `Nbre d'ouvrages commandés`,
date = `Dates des commandes`,
full_book_title = `Editions et Commentaires`,
client_name = Libraire,
author_name = Auteur) %>%
mutate(client_code = map_chr(client_name, function(x) codes[x]), # add client codes
total_number_of_volumes = number_of_volumes * copies_ordered) # infer number of volumes ordered
darnton
darnton %>% select(number_of_volumes) %>% drop_na()
darnton %>% select(number_of_volumes) %>% drop_na() %>% .$number_of_volumes
?str_match
foo <- darnton %>% select(number_of_volumes) %>% drop_na() %>% .$number_of_volumes
foo
str_match(foo, "(/d+) vol")
str_match(foo, "(\\d+) vol")
str_detect(foo, "(\\d+) vol")
str_extract(foo, "(\\d+) vol")
str_match(foo, "(\\d+) vol")
str_match(foo, "(\\d+) vol")[,2]
# Import Darnton's data
darnton <- read_xlsx("darnton_files/darnton_data.xlsx") %>%
rename(darnton_record_id = X__1,
stn_abbreviated_title = `Titre de l'ouvrage`,
edition = format,
number_of_volumes = volumes,
copies_ordered = `Nbre d'ouvrages commandés`,
date = `Dates des commandes`,
full_book_title = `Editions et Commentaires`,
client_name = Libraire,
author_name = Auteur) %>%
mutate(client_code = map_chr(client_name, function(x) codes[x])) %>% # add client codes
mutate(number_of_volumes = str_match(number_of_volumes, "(\\d+) vol")[,2], # quantify volume information
number_of_volumes = as.numeric(number_of_volumes))
darnton
# Import Darnton's data
darnton <- read_xlsx("darnton_files/darnton_data.xlsx") %>%
rename(darnton_record_id = X__1,
stn_abbreviated_title = `Titre de l'ouvrage`,
edition = format,
number_of_volumes = volumes,
copies_ordered = `Nbre d'ouvrages commandés`,
date = `Dates des commandes`,
full_book_title = `Editions et Commentaires`,
client_name = Libraire,
author_name = Auteur) %>%
mutate(client_code = map_chr(client_name, function(x) codes[x])) %>% # add client codes
mutate(number_of_volumes = str_match(number_of_volumes, "(\\d+) vol")[,2], # quantify volume information
number_of_volumes = as.numeric(number_of_volumes)) %>%
mutate(total_number_of_volumes = copies_ordered * number_of_volumes) # infer number of volumes ordered
darnton %>% select(copies_ordered) %>% .$copies_ordered
darnton %>% select(copies_ordered) %>% .$copies_ordered %>% as.numeric()
# Import Darnton's data
darnton <- read_xlsx("darnton_files/darnton_data.xlsx") %>%
rename(darnton_record_id = X__1,
stn_abbreviated_title = `Titre de l'ouvrage`,
edition = format,
number_of_volumes = volumes,
copies_ordered = `Nbre d'ouvrages commandés`,
date = `Dates des commandes`,
full_book_title = `Editions et Commentaires`,
client_name = Libraire,
author_name = Auteur) %>%
mutate(client_code = map_chr(client_name, function(x) codes[x])) %>% # add client codes
mutate(number_of_volumes = str_match(number_of_volumes, "(\\d+) vol")[,2], # quantify volume information
number_of_volumes = as.numeric(number_of_volumes),
copies_ordered = as.numeric(copies_ordered)) %>% # convert copies ordered to numeric data
mutate(total_number_of_volumes = copies_ordered * number_of_volumes) # infer number of volumes ordered
darnton
pull(darnton, copies_ordered)
darnton
foo <- pull(darnton, editions)
foo <- pull(darnton, edition)
foo
str_match(foo, "\\d")
str_match(foo, "\\d") %>% drop_na()
str_match(foo, "\\d") %>%
as.numeric
grep("fol|Fol", foo)
grep("fol|Fol", foo, value = T)
grep("2", foo, value = T)
# Import Darnton's data
darnton <- read_xlsx("darnton_files/darnton_data.xlsx") %>%
rename(darnton_record_id = X__1,
stn_abbreviated_title = `Titre de l'ouvrage`,
edition = format,
number_of_volumes = volumes,
copies_ordered = `Nbre d'ouvrages commandés`,
date = `Dates des commandes`,
full_book_title = `Editions et Commentaires`,
client_name = Libraire,
author_name = Auteur) %>%
mutate(client_code = map_chr(client_name, function(x) codes[x])) %>% # add client codes
mutate(number_of_volumes = str_match(number_of_volumes, "(\\d+) vol")[,2], # quantify volume information
number_of_volumes = as.numeric(number_of_volumes),
copies_ordered = as.numeric(copies_ordered)) %>% # convert copies ordered to numeric data
mutate(total_number_of_volumes = copies_ordered * number_of_volumes) %>% # infer number of volumes ordered
mutate(edition = str_replace(edition, "folio", "2"), # pull out number of leaves
edition = str_match(edition, "\\d"),
edition = as.numeric(edition))
darnton
pull(darnton, date)
pull(transactions, date)
library(lubridate)
foo
darnton %>% filter(nchar(date) != 10) %>% n()
darnton %>% filter(nchar(date) != 10) %>% nrow()
darnton %>% filter(nchar(date) != 10)
darnton %>% filter(nchar(date) != 10) %>% select(date)
darnton %>% filter(str_detect(date, "?")) %>% select(date)
darnton %>% filter(str_detect(date, "[?]")) %>% select(date)
dmy(pull(darnton, date))
pull(darnton, date)[9]
now()
today()
origin
# Import Darnton's data, then wrangle to put in the same format as the FBTEE data
darnton <- read_xlsx("darnton_files/darnton_data.xlsx") %>%
rename(darnton_record_id = X__1,
stn_abbreviated_title = `Titre de l'ouvrage`,
edition = format,
number_of_volumes = volumes,
copies_ordered = `Nbre d'ouvrages commandés`,
date = `Dates des commandes`,
full_book_title = `Editions et Commentaires`,
client_name = Libraire,
author_name = Auteur) %>%
mutate(client_code = map_chr(client_name, function(x) codes[x])) %>% # add client codes
mutate(number_of_volumes = str_match(number_of_volumes, "(\\d+) vol")[,2], # quantify volume information
number_of_volumes = as.numeric(number_of_volumes),
copies_ordered = as.numeric(copies_ordered)) %>% # convert copies ordered to numeric data
mutate(total_number_of_volumes = copies_ordered * number_of_volumes) %>% # infer number of volumes ordered
mutate(edition = str_replace(edition, "folio", "2"), # pull out number of leaves
edition = str_match(edition, "\\d"),
edition = as.numeric(edition)) %>%
mutate(date = dmy(date)) # convert date to common format
darnton
transactions
select(transactions, date)
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
#select(transaction_code, stn_abbreviated_title, edition, number_of_volumes, total_number_of_volumes, date, full_book_title, client_code) %>%
filter(client_code %in% codes) %>%
mutate(date = ymd(date)) # convert date to common format
select(transactions, date)
colnames(darnton)
# Import Darnton's data, then wrangle to put in the same format as the FBTEE data
darnton <- read_xlsx("darnton_files/darnton_data.xlsx") %>%
rename(darnton_record_id = X__1,
stn_abbreviated_title = `Titre de l'ouvrage`,
edition = format,
number_of_volumes = volumes,
copies_ordered = `Nbre d'ouvrages commandés`,
date = `Dates des commandes`,
full_book_title = `Editions et Commentaires`,
client_name = Libraire,
author_name = Auteur) %>%
mutate(client_code = map_chr(client_name, function(x) codes[x])) %>% # add client codes
mutate(number_of_volumes = str_match(number_of_volumes, "(\\d+) vol")[,2], # quantify volume information
number_of_volumes = as.numeric(number_of_volumes),
copies_ordered = as.numeric(copies_ordered)) %>% # convert copies ordered to numeric data
mutate(total_number_of_volumes = copies_ordered * number_of_volumes) %>% # infer number of volumes ordered
mutate(edition = str_replace(edition, "folio", "2"), # pull out number of leaves
edition = str_match(edition, "\\d"),
edition = as.numeric(edition)) %>%
mutate(date = dmy(date)) %>% # convert date to common format
select(-`Remarques générales`, -villes) # drop extraneous columns
colnames(transactions)
colnames(darnton)
?intersect
intersect(colnames(darnton), colnames(transactions))
colnames(transactions)
vars(c("x","y","z"))
?vars
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
select(colnames(darnton)) %>%
filter(client_code %in% codes) %>%
mutate(date = ymd(date)) # convert date to common format
transactions
?select
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
select(!!!colnames(darnton)) %>%
filter(client_code %in% codes) %>%
mutate(date = ymd(date)) # convert date to common format
transactions
!!!colnames(darnton)
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
select(colnames(!!darnton)) %>%
filter(client_code %in% codes) %>%
mutate(date = ymd(date)) # convert date to common format
transactions
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
select(!!colnames(!!darnton)) %>%
filter(client_code %in% codes) %>%
mutate(date = ymd(date)) # convert date to common format
transactions
colnames(darnton)
?select
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
select(.dots = colnames(darnton)) %>%
filter(client_code %in% codes) %>%
mutate(date = ymd(date)) # convert date to common format
transactions
glue_collapse
?glue_collapse
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
select(!!colnames(darnton)) %>%
filter(client_code %in% codes) %>%
mutate(date = ymd(date)) # convert date to common format
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
select(!!(colnames(darnton))) %>%
filter(client_code %in% codes) %>%
mutate(date = ymd(date)) # convert date to common format
?select
?vars
?quo
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
select(syms(colnames(darnton))) %>%
filter(client_code %in% codes) %>%
mutate(date = ymd(date)) # convert date to common format
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
select(colnames(darnton))
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
filter(client_code %in% codes) %>%
mutate(date = ymd(date)) # convert date to common format
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
filter(client_code %in% codes) %>%
mutate(date = ymd(date)) # convert date to common format
# Now join the tables together for deduplication.
darnton_combined_data <- darnton %>%
mutate(transaction_code = NA,
transaction_code = as.character(transaction_code)) %>%
full_join(transactions, by = "transaction_code") %>%
select(colnames(darnton)) %T>%
write_csv("darnton_files/darnton_combined.csv")
# Now join the tables together for deduplication.
darnton_combined_data <- darnton %>%
full_join(transactions, by = "transaction_code") %>%
select(colnames(darnton)) %T>%
write_csv("darnton_files/darnton_combined.csv")
# Now join the tables together for deduplication.
darnton_combined_data <- bind_rows(darnton, transactions) %>%
select(colnames(darnton)) %T>%
write_csv("darnton_files/darnton_combined.csv")
darnton
transactions
select(transactions, edition)
pull(transactions, edition)
transactions <- manuscripts %>%
dbSendQuery("SELECT * FROM transactions") %>%
fetch(n = Inf) %>%
as_tibble() %>%
select(-super_book_code) %>%
left_join(orders, by = "order_code") %>%
left_join(editions, by = "book_code") %>%
filter(client_code %in% codes) %>%
mutate(date = ymd(date)) %>% # convert date to common format
mutate(edition = str_replace(edition, "Folio|folio", "2"), # convert edition data to common format
edition = str_extract(edition, "\\d+"),
edition = as.numeric(edition))
# Now join the tables together for deduplication.
darnton_combined_data <- bind_rows(darnton, transactions) %>%
select(colnames(darnton)) %T>%
write_csv("darnton_files/darnton_combined.csv")
darnton_combined_data
rm(list = ls())
