)
dealers %>% filter(!str_detect(Client_Code, "cm|cl"))
booksellers %>% filter(!str_detect(Client_Code, "cm|cl"))
inspectors %>% filter(!str_detect(Client_Code, "cm|cl"))
dealers %>% filter(str_detect(Client_Code, "cm|cl"))
# Check: are there any codes that don't fit this cm/cp/cl mould?
sum(
dealers %>% filter(!str_detect(Client_Code, "cm|cl|cp")) %>% nrow(),
booksellers %>% filter(!str_detect(Client_Code, "cm|cl|cp")) %>% nrow(),
inspectors %>% filter(!str_detect(Client_Code, "cm|cl|cp")) %>% nrow()
)
dealers %>% filter(!str_detect(Client_Code, "cm|cl|cp"))
# Do any person codes lack a client?
cp_joined %>%
filter(is.na(client_code))
# Does every client have a person code?
cp_joined %>%
filter(is.na(person_code), !is.na(client_code)) %>%
summarise(no_person_code = n())
# Do any person codes lack a client?
cp_joined %>%
filter(is.na(client_code)) %>%
select(person_code, person_name)
# Do any person codes lack a client?
cp_joined %>%
filter(is.na(client_code)) %>%
select(person_code, person_name) %>%
print(n = Inf)
# How many of these 'cm' clients are there?
sum(
dealers %>% filter(str_detect(Client_Code, "cp")) %>% nrow(),
booksellers %>% filter(str_detect(Client_Code, "cm")) %>% nrow(),
inspectors %>% filter(str_detect(Client_Code, "cm")) %>% nrow()
) # 219
# Yeah, but how many are unique...
c(
dealers %>% pull(Client_Code),
booksellers %>% pull(Client_Code),
inspectors %>% pull(Client_Code)
) %>%
as_tibble() %>%
filter(str_detect(value, "cm")) %>%
nrow()
# Yeah, but how many are unique...
c(
dealers %>% pull(Client_Code),
booksellers %>% pull(Client_Code),
inspectors %>% pull(Client_Code)
) %>%
as_tibble() %>%
filter(str_detect(value, "cm|cp")) %>%
nrow()
# How many of these 'cm/cp' clients are there?
sum(
dealers %>% filter(str_detect(Client_Code, "cp")) %>% nrow(),
booksellers %>% filter(str_detect(Client_Code, "cm")) %>% nrow(),
inspectors %>% filter(str_detect(Client_Code, "cm")) %>% nrow()
) # 428
# Yeah, but how many are unique...
c(
dealers %>% pull(Client_Code),
booksellers %>% pull(Client_Code),
inspectors %>% pull(Client_Code)
) %>%
as_tibble() %>%
filter(str_detect(value, "cm|cp")) %>%
nrow()
# Yeah, but how many are unique...
c(
dealers %>% pull(Client_Code),
booksellers %>% pull(Client_Code),
inspectors %>% pull(Client_Code)
) %>%
as_tibble() %>%
filter(str_detect(value, "cm|cp")) %>%
distinct() %>%
nrow()
# Have any cm codes been given to two different people?
booksellers %>%
left_join(inspectors, by="Client_Code") %>%
select(Client_Code, Agent_Name, Dealer_Name) %>%
group_by(Client_Code) %>%
filter(n() > 1)
# Have any cm codes been given to two different people?
booksellers %>%
left_join(inspectors, by="Client_Code") %>%
select(Client_Code, Agent_Name, Dealer_Name) %>%
filter(Agent_Name != Dealer_Name)
?`stringdist-parallelization`
# Have a look at them...
ca_join <- tibble(
client_code = clients[clients_authors[,2],]$client_code,
client_name = clients[clients_authors[,2],]$client_name,
author_code = authors[clients_authors[,1],]$author_code,
author_name = authors[clients_authors[,1],]$author_name,
osa = sim_mat[clients_authors],
cosine = stringsim(client_name, author_name, method = 'cosine')
) %>%
arrange(desc(osa), desc(cosine)) %T>%
print(n = Inf)
# Have a look at them...
ca_join <- tibble(
client_code = clients[clients_authors[,2],]$client_code,
client_name = clients[clients_authors[,2],]$client_name,
author_code = authors[clients_authors[,1],]$author_code,
author_name = authors[clients_authors[,1],]$author_name,
osa = sim_mat[clients_authors],
cosine = stringsim(client_name, author_name, method = 'cosine')
) %>%
arrange(desc(osa), desc(cosine)) %>%
left_join(clients_people, by="client_code") %T>%
print(n = Inf)
# Have a look at them...
ca_join <- tibble(
client_code = clients[clients_authors[,2],]$client_code,
client_name = clients[clients_authors[,2],]$client_name,
author_code = authors[clients_authors[,1],]$author_code,
author_name = authors[clients_authors[,1],]$author_name,
osa = sim_mat[clients_authors],
cosine = stringsim(client_name, author_name, method = 'cosine')
) %>%
arrange(desc(osa), desc(cosine)) %>%
left_join(clients_people, by="client_code") %>%
select(client_code, person_code, everything()) %T>%
print(n = Inf)
# Do any person codes lack a client?
cp_joined %>%
filter(is.na(client_code)) %>%
select(person_code, person_name) %>%
print(n = Inf)
# Have a look at them...
ca_join <- tibble(
client_code = clients[clients_authors[,2],]$client_code,
client_name = clients[clients_authors[,2],]$client_name,
author_code = authors[clients_authors[,1],]$author_code,
author_name = authors[clients_authors[,1],]$author_name,
osa = sim_mat[clients_authors],
cosine = stringsim(client_name, author_name, method = 'cosine')
) %>%
arrange(desc(osa), desc(cosine)) %>%
left_join(clients_people, by="client_code") %>%
select(client_code, person_code, everything()) %T>%
print(n = Inf)
stringsimmatrix <- function(a, b, method) {
#
# Computes a string similarity matrix for all pairs of words in two character vectors.
#
# Params:
#   a: a character vector
#   b: a character vector
#   c: the chosen similarity method
#
sim_vecs <- lapply(a, function(x) {
stringsim(a, b, method = method)
})
sim_vecs <- unlist(sim_vecs)
sim_mat <- matrix(sim_vecs, nrow = nrow(a), ncol = nrow(b), byrow = T)
return(sim_mat)
}
rm(sim_mat)
gc
gc()
# Run seperate match against person table
pa_mat <- stringsimmatrix(authors$author_name, people$person_name, method = 'osa')
warnings()
stringsimmatrix <- function(a, b, method) {
#
# Computes a string similarity matrix for all pairs of words in two character vectors.
#
# Params:
#   a: a character vector
#   b: a character vector
#   c: the chosen similarity method
#
sim_vecs <- lapply(a, function(x) {
stringsim(x, b, method = method)
})
sim_vecs <- unlist(sim_vecs)
sim_mat <- matrix(sim_vecs, nrow = nrow(a), ncol = nrow(b), byrow = T)
return(sim_mat)
}
# Run seperate match against person table
pa_mat <- stringsimmatrix(authors$author_name, people$person_name, method = 'osa')
stringsimmatrix <- function(a, b, method = 'osa') {
#
# Computes a string similarity matrix for all pairs of words in two character vectors.
#
# Params:
#   a: a character vector
#   b: a character vector
#   c: the chosen similarity method
#
sim_vecs <- lapply(a, function(x) {
stringsim(x, b, method = method)
})
sim_vecs <- unlist(sim_vecs)
sim_mat <- matrix(sim_vecs, nrow = nrow(a), ncol = nrow(b), byrow = T)
return(sim_mat)
}
foo <- 3
message("Can I ", foo, " do this?")
stringsimmatrix <- function(a, b, method = 'osa') {
#
# Computes a string similarity matrix for all pairs of words in two character vectors.
#
# Params:
#   a: a character vector
#   b: a character vector
#   c: the chosen similarity method
#
message("Computing...")
tick <- Sys.time()
sim_vecs <- lapply(a, function(x) {
stringsim(x, b, method = method)
})
sim_vecs <- unlist(sim_vecs)
sim_mat <- matrix(sim_vecs, nrow = length(a), ncol = length(b), byrow = T)
tock <- Sys.time()
t <- tock - tick
message("Complete. It took ", t, " seconds.")
return(sim_mat)
}
# Run seperate match against person table
pa_mat <- stringsimmatrix(authors$author_name, people$person_name, method = 'osa')
people_authors <- which(pa_mat > 0.8, arr.ind = T)
# Have a look at them...
pa_join <- tibble(
person_code = people[people_authors[,2],]$person_code,
person_name = people[people_authors[,2],]$person_name,
author_code = authors[people_authors[,1],]$author_code,
author_name = authors[people_authors[,1],]$author_name,
osa = pa_mat[people_authors],
cosine = stringsim(person_name, author_name, method = 'cosine')
) %>%
arrange(desc(osa), desc(cosine)) %T>%
print(n = Inf)
# Have a look at them...
pa_join <- tibble(
person_code = people[people_authors[,2],]$person_code,
person_name = people[people_authors[,2],]$person_name,
author_code = authors[people_authors[,1],]$author_code,
author_name = authors[people_authors[,1],]$author_name,
osa = pa_mat[people_authors],
cosine = stringsim(person_name, author_name, method = 'cosine')
) %>%
arrange(desc(osa), desc(cosine)) %>%
distinct(author_code) %T>%
print(n = Inf)
# Have a look at them...
pa_join <- tibble(
person_code = people[people_authors[,2],]$person_code,
person_name = people[people_authors[,2],]$person_name,
author_code = authors[people_authors[,1],]$author_code,
author_name = authors[people_authors[,1],]$author_name,
osa = pa_mat[people_authors],
cosine = stringsim(person_name, author_name, method = 'cosine')
) %>%
arrange(desc(osa), desc(cosine)) %>%
distinct(author_code, .keep_all = True) %T>%
print(n = Inf)
# Have a look at them...
pa_join <- tibble(
person_code = people[people_authors[,2],]$person_code,
person_name = people[people_authors[,2],]$person_name,
author_code = authors[people_authors[,1],]$author_code,
author_name = authors[people_authors[,1],]$author_name,
osa = pa_mat[people_authors],
cosine = stringsim(person_name, author_name, method = 'cosine')
) %>%
arrange(desc(osa), desc(cosine)) %>%
distinct(author_code, .keep_all = T) %T>%
print(n = Inf)
c("a","b","c") %in% c("a","b")
manuscript_agents_booksellers
booksellers
# Looking closely at JE's code, it turns out that manuscript_agents_booksellers is never referred to.
# Does it contain any necessary information?
booksellers_dealers <- stringsimmatrix(booksellers$Dealer_Name, dealers$Dealer_Name)
top_bd_matches <- apply(booksellers_dealers, 1, which.max)
top_bd_scores <- apply(booksellers_dealers, 1, max)
str_detect(dealers$Client_Code, "cm")
str_detect(dealers$Client_Code, "cp")
booksellers$Client_Code %in% dealers$Client_Code
# Looking closely at JE's code, it turns out that manuscript_agents_booksellers is never referred to.
# Does it contain any necessary information?
sum(booksellers$Client_Code %in% dealers$Client_Code) / nrow(booksellers)
# Are there any duplicate codes?
dealers %>%
left_join(inspectors, by = "Client_Code") %>%
drop_na() %>%
filter(Dealer_Name != Agent_Name)
# Are there any duplicate codes?
dealers %>%
left_join(inspectors, by = "Client_Code") %>%
drop_na() %>%
filter(Dealer_Name != Agent_Name) %>%
select(Client_Code, Dealer_Name, Agent_Name)
# Are the inspectors included in the dealers table too?
sum(inspectors$Client_Code %in% dealers$Client_Code) / nrow(inspectors)
sum(inspectors$Client_Code %in% dealers$Client_Code)
nrow(inspectors)
# Are there any duplicate codes?
dealers %>%
left_join(inspectors, by = "Client_Code") %>%
drop_na() %>%
filter(Dealer_Name != Agent_Name) %>%
select(Client_Code, Dealer_Name, Agent_Name)
person_keywords <- manuscripts %>%
dbSendQuery(paste0(
"SELECT * FROM keywords ",
"WHERE tag_code = 't01'"
)) %>%
fetch(n = Inf) %>%
as.tibble()
person_keywords
# Does every client have a person code?
cp_joined %>%
filter(is.na(person_code), !is.na(client_code)) %>%
summarise(no_person_code = n())
cp_joined %>%
filter(is.na(person_code), !is.na(client_code))
# Does every client have a person code?
cp_joined %>%
filter(is.na(person_code), !is.na(client_code)) %>%
summarise(no_person_code = n())
# Apparently 52 clients lack a person code. Who are they?
cp_joined %>%
filter(is.na(person_code), !is.na(client_code)) %>%
select(client_code, client_name, partnership) %>%
print(n = Inf)
rm(pa_mat)
gc()
person_keywords$keyword
# Is there a person corresponding to any of the keywords at the moment?
kp_mat <- stringsimmatrix(person_keywords$keyword, people$person_name)
stringsimmatrix <- function(a, b, method = 'osa') {
#
# Computes a string similarity matrix for all pairs of words in two character vectors.
#
# Params:
#   a: a character vector
#   b: a character vector
#   c: the chosen similarity method
#
message("Computing similarity using ", method, "...")
tick <- Sys.time()
sim_vecs <- lapply(a, function(x) {
stringsim(x, b, method = method)
})
sim_vecs <- unlist(sim_vecs)
sim_mat <- matrix(sim_vecs, nrow = length(a), ncol = length(b), byrow = T)
tock <- Sys.time()
t <- tock - tick
message("Complete. It took ", t, " seconds.")
return(sim_mat)
}
message(1 + 2)
tick = 2
tock = 3
message("Complete. It took ", tock - tick, " seconds.")
message("Complete. It took ", tock - tick, " second", if(tock > 1){"s"}, ".")
message("Complete. It took ", tock - tick, " second", if(tock > 10){"s"}, ".")
if(t > 1){"s"}
t = 3
if(t > 1){"s"}
t = 0.5
if(t > 1){"s"}
stringsimmatrix <- function(a, b, method = 'osa') {
#
# Computes a string similarity matrix for all pairs of words in two character vectors.
#
# Params:
#   a: a character vector
#   b: a character vector
#   c: the chosen similarity method
#
message("Computing similarity using ", method, "...")
# Start timer
tick <- Sys.time()
sim_vecs <- lapply(a, function(x) {
stringsim(x, b, method = method) # Compare each item in a with all of b
})
sim_vecs <- unlist(sim_vecs) # Turn list into long vector
sim_mat <- matrix(sim_vecs, nrow = length(a), ncol = length(b), byrow = T) # Reshape into matrix
# End timer
tock <- Sys.time()
t <- tock - tick
message("Complete. It took ", t, " second", if(t > 1){"s"}, ".")
return(sim_mat)
}
# Is there a person corresponding to any of the keywords at the moment?
kp_mat <- stringsimmatrix(person_keywords$keyword, people$person_name)
top_kp_matches <- apply(kp_mat, 1, which.max)
top_kp_scores <- apply(kp_mat, 1, max)
top_kp_matches
kp_join <- tibble(
keyword_code = person_keywords$keyword_code,
keyword = person_keywords$keyword,
person_code = people$person_code[top_kp_matches],
person_name = people$person_name[top_kp_matches],
osa = top_kp_scores,
cosine = stringsim(keyword, person_name, method = "cosine")
) %>%
arrange(desc(osa), desc(cosine)) %T>%
print(n = Inf)
ka_mat <- stringsimmatrix(person_keywords$keyword, authors$author_name)
top_ka_matches <- apply(ka_mat, 1, which.max)
top_ka_scores <- apply(ka_mat, 1, max)
ka_join <- tibble(
keyword_code = person_keywords$keyword_code,
keyword = person_keywords$keyword,
author_code = authors$author_code[top_ka_matches],
author_name = authors$author_name[top_ka_matches],
osa = top_ka_scores,
cosine = stringsim(keyword, author_name, method = "cosine")
) %>%
arrange(desc(osa), desc(cosine)) %T>%
print(n = Inf)
ls()
?ls
filter(dealers, client_code == "cn0001")
filter(dealers, client_code == "cn0112")
filter(dealers, Client_Code == "cn0112")
filter(dealers, Client_Code == "cm0112")
filter(dealers, Client_Code == "cm0111")
filter(dealers, Client_Code == "cm0003")
37.5*48
345/1800
37.5*46
37.5*46*0.1
37.5*45*0.1
37.5*44*0.1
37.5*43*0.1
37.5*42*0.1
37.5*40*0.1
# Do any person codes lack a client?
cp_joined %>%
filter(is.na(client_code)) %>%
select(person_code, person_name) %>%
print(n = Inf)
# How many person codes refer to groups of clients?
cp_joined %>%
group_by(person_code) %>%
summarise(clients_per_person_code = n()) %>%
group_by(clients_per_person_code) %>%
summarise(freq = n())
# Which are they?
cp_joined %>%
group_by(person_code) %>%
summarise(clients_per_person_code = n()) %>%
group_by(clients_per_person_code) %>%
filter(n() = 52)
# Which are they?
cp_joined %>%
group_by(person_code) %>%
summarise(clients_per_person_code = n()) %>%
group_by(clients_per_person_code) %>%
filter(n() == 52)
# Which are they?
cp_joined %>%
group_by(person_code) %>%
filter(n() == 52)
# Which are they?
cp_joined %>%
group_by(person_code) %>%
filter(n() == 52) %>%
select(person_code, person_name)
# How many person codes refer to groups of clients?
cp_joined %>%
select(person_code, client_code) %>%
drop_na() %>%
group_by(person_code) %>%
summarise(clients_per_person_code = n()) %>%
group_by(clients_per_person_code) %>%
summarise(freq = n())
# Which are these person codes
cp_joined %>%
select(person_code, client_code) %>%
drop_na() %>%
group_by(person_code) %>%
filter(n() > 1)
# Which are these person codes
cp_joined %>%
select(person_code, person_name, client_code, client_name) %>%
drop_na() %>%
group_by(person_code) %>%
filter(n() > 1)
# Which are these person codes
cp_joined %>%
select(person_code, person_name, client_code, client_name) %>%
drop_na() %>%
group_by(person_code) %>%
filter(n() > 1) %>%
print(n = Inf)
# Which are these person codes
cp_joined %>%
select(person_code, person_name, client_code, client_name) %>%
drop_na() %>%
group_by(person_code) %>%
filter(n() > 1) %>%
ungroup() %>%
arrange(client_code) %>%
print(n = Inf)
# Which are these person codes
cp_joined %>%
select(person_code, person_name, client_code, client_name) %>%
drop_na() %>%
group_by(person_code) %>%
filter(n() > 1) %>%
ungroup() %>%
arrange(person_code) %>%
print(n = Inf)
