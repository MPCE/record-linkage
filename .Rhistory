# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- NA
name <- cont$recordData$record$nameForms %>%
map_if("headingForm", .p = ~ get_name_type(.x) == "inverted") %>%
.[1] %>%
unlist()
if (length(name) == 0) {
name <- as.character(cont$recordData$record$nameForms)
}
i <<- i + 1
out <- tibble(name = name)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
foo <- parse_cerl(resp)
i <- 0
parse_cerl <- function(resp) {
# Retrieves key information from CERL response
i <- 0
# Get content
cont <- content(resp) %>% as_list() %>% .$searchRetrieveResponse %>% .$records
# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- NA
name <- cont$recordData$record$nameForms %>%
map_if("headingForm", .p = ~ get_name_type(.x) == "inverted") %>%
.[1] %>%
unlist()
if (length(name) == 0) {
name <- as.character(cont$recordData$record$nameForms)
}
i <- i + 1
out <- tibble(name = name)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
foo <- parse_cerl(resp)
parse_cerl <- function(resp) {
# Retrieves key information from CERL response
i <- 0
# Get content
cont <- content(resp) %>% as_list() %>% .$searchRetrieveResponse %>% .$records
# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- NA
name <- cont$recordData$record$nameForms %>%
map_if("headingForm", .p = ~ get_name_type(.x) == "inverted") %>%
.[1] %>%
unlist()
if (length(name) == 0) {
name <- as.character(cont$recordData$record$nameForms)
}
i <<- i + 1
out <- tibble(name = name)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
foo <- parse_cerl(resp)
foo
print(foo, n = Inf)
parse_cerl <- function(resp) {
# Retrieves key information from CERL response
i <- 0
# Get content
cont <- content(resp) %>% as_list() %>% .$searchRetrieveResponse %>% .$records
# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- NA
name <- cont$recordData$record$nameForms %>%
map_if("headingForm", .p = ~ .x %@% "name" == "inverted") %>%
.[1] %>%
unlist()
if (length(name) == 0) {
name <- as.character(cont$recordData$record$nameForms)
}
i <<- i + 1
out <- tibble(name = name)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
print(foo, n = Inf)
resp[[6]]
list[[6]]
parse_cerl <- function(resp) {
# Retrieves key information from CERL response
i <- 0
# Get content
cont <- content(resp) %>% as_list() %>% .$searchRetrieveResponse %>% .$records
# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- NA
name <- cont$recordData$record$nameForms %>%
map_if("headingForm", .p = ~ .x[[1]] %@% "name" == "inverted") %>%
.[1] %>%
unlist()
if (length(name) == 0) {
name <- as.character(cont$recordData$record$nameForms)
}
i <<- i + 1
out <- tibble(name = name)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
foo <- parse_cerl(resp)
?map_depth
parse_cerl <- function(resp) {
# Retrieves key information from CERL response
i <- 0
# Get content
cont <- content(resp) %>% as_list() %>% .$searchRetrieveResponse %>% .$records
# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- NA
name <- cont$recordData$record$nameForms %>%
map_if("headingForm", .p = ~ function(.x) map_depth(.x, -1) %@% "name" == "inverted") %>%
.[1] %>%
unlist()
if (length(name) == 0) {
name <- as.character(cont$recordData$record$nameForms)
}
i <<- i + 1
out <- tibble(name = name)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
?map_depth
foo <- parse_cerl(resp)
parse_cerl <- function(resp) {
# Retrieves key information from CERL response
i <- 0
# Get content
cont <- content(resp) %>% as_list() %>% .$searchRetrieveResponse %>% .$records
# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- NA
name <- cont$recordData$record$nameForms %>%
map_if("headingForm", .p = ~ function(.x) map_depth(.x, -1) %>% . %@% "name" == "inverted") %>%
.[1] %>%
unlist()
if (length(name) == 0) {
name <- as.character(cont$recordData$record$nameForms)
}
i <<- i + 1
out <- tibble(name = name)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
foo <- parse_cerl(resp)
parse_cerl <- function(resp) {
# Retrieves key information from CERL response
i <- 0
# Get content
cont <- content(resp) %>% as_list() %>% .$searchRetrieveResponse %>% .$records
# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- NA
name <- cont$recordData$record$nameForms %>%
map_if("headingForm", .p = ~ function(.x) .x[[1]] %@% "name" == "inverted") %>%
.[1] %>%
unlist()
if (length(name) == 0) {
name <- as.character(cont$recordData$record$nameForms)
}
i <<- i + 1
out <- tibble(name = name)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
foo <- parse_cerl(resp)
parse_cerl <- function(resp) {
# Retrieves key information from CERL response
i <- 0
# Get content
cont <- content(resp) %>% as_list() %>% .$searchRetrieveResponse %>% .$records
# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- NA
name <- cont$recordData$record$nameForms %>%
map_if("headingForm", .p = ~ function(.x) {check <- .x[[1]]; check %@% "name" == "inverted"}) %>%
.[1] %>%
unlist()
if (length(name) == 0) {
name <- as.character(cont$recordData$record$nameForms)
}
i <<- i + 1
out <- tibble(name = name)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
foo <- parse_cerl(resp)
parse_cerl <- function(resp) {
# Retrieves key information from CERL response
i <- 0
# Get content
cont <- content(resp) %>% as_list() %>% .$searchRetrieveResponse %>% .$records
# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- NA
name <- cont$recordData$record$nameForms %>%
map_if("headingForm", .p = ~ function(.x) {check <- .x[[1]]; val <- check %@% "name" == "inverted"; return(val)}) %>%
.[1] %>%
unlist()
if (length(name) == 0) {
name <- as.character(cont$recordData$record$nameForms)
}
i <<- i + 1
out <- tibble(name = name)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
foo <- parse_cerl(resp)
parse_cerl <- function(resp) {
# Retrieves key information from CERL response
i <- 0
# Get content
cont <- content(resp) %>% as_list() %>% .$searchRetrieveResponse %>% .$records
# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- NA
name <- cont$recordData$record$nameForms %>%
map_if("headingForm", .p = ~ function(.x) {check <- map_depth(.x, -1)[[1]]; val <- check %@% "name" == "inverted"; return(val)}) %>%
.[1] %>%
unlist()
if (length(name) == 0) {
name <- as.character(cont$recordData$record$nameForms)
}
i <<- i + 1
out <- tibble(name = name)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
foo <- parse_cerl(resp)
list[[12]]$recordData$record$nameForms
list[[12]]$recordData$record$nameForms %>% attributes()
list[[12]]$recordData$record$nameForms %>% sapply(attributes)
list[[12]]$recordData$record$nameForms %>% as.character()
list[[12]]$recordData$record$nameForms %>% unlist()
parse_cerl <- function(resp) {
# Retrieves key information from CERL response
i <- 0
# Get content
cont <- content(resp) %>% as_list() %>% .$searchRetrieveResponse %>% .$records
# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- NA
n_list <- cont$recordData$record$nameForms
nms <- unlist(n_list)
types <- names(names)
attrs <- sapply(n_list, attributes)
idx <- types == "headingForm" & attrs == "inverted"
if (sum(idx) > 0) {
name <- nms[idx]
} else {
name <- nms[1]
}
i <<- i + 1
out <- tibble(name = name)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
foo <- parse_cerl(resp)
foo
foo %>% print(n = Inf)
n_list <- list[[1]]$recordData$record$nameForms
nms <- unlist(n_list)
nms
types <- names(names)
types
types <- names(nms)
types
attrs <- sapply(n_list, attributes)
types
attrs
idx <- types == "headingForm" & attrs == "inverted"
idx
name <- nms[idx]
name
name
name
name <- nms[idx][1]
name
out <- tibble(name = name)
out
parse_cerl <- function(resp) {
# Retrieves key information from CERL response
i <- 0
# Get content
cont <- content(resp) %>% as_list() %>% .$searchRetrieveResponse %>% .$records
# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- NA
n_list <- cont$recordData$record$nameForms
nms <- unlist(n_list)
types <- names(nms)
attrs <- sapply(n_list, attributes)
idx <- types == "headingForm" & attrs == "inverted"
if (sum(idx) > 0) {
name <- nms[idx][1]
} else {
name <- nms[1]
}
i <<- i + 1
out <- tibble(name = name)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
foo <- parse_cerl(resp)
foo
#get_cerl_id <- function(result) {
# The the CERL id number for the person
list[[1]]
#get_cerl_id <- function(result) {
# The the CERL id number for the person
list[[1]]$recordIdentifier[[1]]
# get_cerl_bio <- function(result) {
# Get the dates for the CERL person
list[[22]]$recordData$record$info$biographicalData
# get_cerl_bio <- function(result) {
# Get the dates for the CERL person
list[[22]]$recordData$record$info$biographicalData[[1]]
# get_cerl_bio <- function(result) {
# Get the dates for the CERL person
list[[12]]$recordData$record$info$biographicalData[[1]]
foo <- NULL
foo
is.null(foo)
if_else(is.null(foo), "null!", "not null :(")
foo <- c(NULL, NA, NULL)
if_else(is.null(foo), "null!", "not null :(")
foo <- list(NULL, NA, NULL)
if_else(is.null(foo), "null!", "not null :(")
parse_cerl <- function(resp) {
# Retrieves key information from CERL response
i <- 0
# Get content
cont <- content(resp) %>% as_list() %>% .$searchRetrieveResponse %>% .$records
# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- get_cerl_name(cont)
# The cerl id:
cerl_id <- cont$recordIdentifer[[1]]
# The biographicalData:
bd <- cont$recordData$record$info$biographicalData[[1]]
bio_data <- if_else(is.null(bd), NA, bd)
# The activityNote
an <- cont$recordData$record$info$activityNote[[1]]
activity_note <- if_else(is.null(an), NA, an)
# The geographicalNote
gn <- cont$recordData$record$info$geographicalNote[[1]]
geo_note <- if_else(is.null(gn), NA, gn)
i <<- i + 1
out <- tibble(name = name, cerl_id = cerl_id, bio_data = bio_data, geo_note = geo_note)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
foo <- parse_cerl(resp)
get_cerl_name <- function(result) {
# Get the name of the CERL person, preferring the inverted headingForm
n_list <- result$recordData$record$nameForms
nms <- unlist(n_list)
types <- names(nms)
attrs <- sapply(n_list, attributes)
idx <- types == "headingForm" & attrs == "inverted"
if (sum(idx) > 0) {
name <- nms[idx][1]
} else {
name <- nms[1]
}
return(name)
}
foo <- parse_cerl(resp)
parse_cerl <- function(resp) {
# Retrieves key information from CERL response
i <- 0
# Get content
cont <- content(resp) %>% as_list() %>% .$searchRetrieveResponse %>% .$records
# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- get_cerl_name(cont)
# The cerl id:
cerl_id <- cont$recordIdentifer[[1]]
# The biographicalData:
bio_data <- cont$recordData$record$info$biographicalData[[1]]
if (is.null(bio_data)) {bio_data <- NA}
# The activityNote
activity_note <- cont$recordData$record$info$activityNote[[1]]
if (is.null(activity_note)) {activity_note <- NA}
# The geographicalNote
geo_note <- cont$recordData$record$info$geographicalNote[[1]]
if (is.null(geo_note)) {geo_note <- NA}
i <<- i + 1
out <- tibble(name = name, cerl_id = cerl_id, bio_data = bio_data, geo_note = geo_note)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
foo <- parse_cerl(resp)
lapply(list, function(x) x$recordIdentifer)
list[[1]]
lapply(list, function(x) x$recordIdentifer[[1]])
lapply(list, function(x) map(x, "recordIdentifier"))
lapply(list, function(x) x$recordIdentifer %>% unlist())
lapply(list, function(x) names(x))
lapply(list, function(x) x$recordIdentifer)
lapply(list, function(x) x$recordIdentifer[[1]])
lapply(list, function(x) return(x$recordIdentifer[[1]]))
list[[12]]$recordIdentifier
list[[12]]$recordIdentifier[[1]]
map(list, "recordIdentifier")
map(list, "recordIdentifier") %>% flatten()
map
map_depth(list, -1, "biographicalData")
map_depth(list, -2, "biographicalData")
map_depth(list, -3, "biographicalData")
sapply(list, function(x) x$recordIdentifier)
lapply(list, function(x) x$recordIdentifier)
lapply(list, function(x) x$recordIdentifier %>% unlist())
parse_cerl <- function(resp) {
# Retrieves key information from CERL response
i <- 0
# Get content
cont <- content(resp) %>% as_list() %>% .$searchRetrieveResponse %>% .$records
# Define closure
.parse_result <- function(cont) {
# What do we want to know?
message("Iteration ", i)
# The name:
name <- get_cerl_name(cont)
# The cerl id:
cerl_id <- cont$recordIdentifer %>% unlist()
# The biographicalData:
bio_data <- cont$recordData$record$info$biographicalData[[1]]
if (is.null(bio_data)) {bio_data <- NA}
# The activityNote
activity_note <- cont$recordData$record$info$activityNote[[1]]
if (is.null(activity_note)) {activity_note <- NA}
# The geographicalNote
geo_note <- cont$recordData$record$info$geographicalNote[[1]]
if (is.null(geo_note)) {geo_note <- NA}
i <<- i + 1
out <- tibble(name = name, cerl_id = cerl_id, bio_data = bio_data, geo_note = geo_note)
}
out <- lapply(cont, .parse_result) %>% bind_rows()
return(out)
}
foo <- parse_cerl(resp)
cont <- list[[1]]
cont
cont$recordIdentifier
cont$recordIdentifier[1]
cont$recordIdentifier[[1]]
cont$recordIdentifier %>% unlist()
